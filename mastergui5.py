# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'master5.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(417, 622)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(12, 279, 365, 183))
        self.widget.setObjectName("widget")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_20 = QtWidgets.QLabel(self.widget)
        self.label_20.setObjectName("label_20")
        self.gridLayout_4.addWidget(self.label_20, 0, 0, 1, 1)
        self.label_40 = QtWidgets.QLabel(self.widget)
        self.label_40.setObjectName("label_40")
        self.gridLayout_4.addWidget(self.label_40, 0, 2, 1, 1)
        self.label_21 = QtWidgets.QLabel(self.widget)
        self.label_21.setObjectName("label_21")
        self.gridLayout_4.addWidget(self.label_21, 1, 0, 1, 1)
        self.RackSpacingLowerLimit = QtWidgets.QLineEdit(self.widget)
        self.RackSpacingLowerLimit.setText("")
        self.RackSpacingLowerLimit.setObjectName("RackSpacingLowerLimit")
        self.gridLayout_4.addWidget(self.RackSpacingLowerLimit, 1, 1, 1, 1)
        self.label_41 = QtWidgets.QLabel(self.widget)
        self.label_41.setObjectName("label_41")
        self.gridLayout_4.addWidget(self.label_41, 1, 2, 1, 1)
        self.label_22 = QtWidgets.QLabel(self.widget)
        self.label_22.setObjectName("label_22")
        self.gridLayout_4.addWidget(self.label_22, 2, 0, 1, 1)
        self.RackSpacingUpperLimit = QtWidgets.QLineEdit(self.widget)
        self.RackSpacingUpperLimit.setText("")
        self.RackSpacingUpperLimit.setObjectName("RackSpacingUpperLimit")
        self.gridLayout_4.addWidget(self.RackSpacingUpperLimit, 2, 1, 1, 1)
        self.label_39 = QtWidgets.QLabel(self.widget)
        self.label_39.setObjectName("label_39")
        self.gridLayout_4.addWidget(self.label_39, 2, 2, 1, 1)
        self.label_23 = QtWidgets.QLabel(self.widget)
        self.label_23.setObjectName("label_23")
        self.gridLayout_4.addWidget(self.label_23, 3, 0, 1, 1)
        self.TierodLengthLowerLimit = QtWidgets.QLineEdit(self.widget)
        self.TierodLengthLowerLimit.setText("")
        self.TierodLengthLowerLimit.setObjectName("TierodLengthLowerLimit")
        self.gridLayout_4.addWidget(self.TierodLengthLowerLimit, 3, 1, 1, 1)
        self.label_35 = QtWidgets.QLabel(self.widget)
        self.label_35.setObjectName("label_35")
        self.gridLayout_4.addWidget(self.label_35, 3, 2, 1, 1)
        self.label_24 = QtWidgets.QLabel(self.widget)
        self.label_24.setObjectName("label_24")
        self.gridLayout_4.addWidget(self.label_24, 4, 0, 1, 1)
        self.TierodLengthUpperLimit = QtWidgets.QLineEdit(self.widget)
        self.TierodLengthUpperLimit.setText("")
        self.TierodLengthUpperLimit.setObjectName("TierodLengthUpperLimit")
        self.gridLayout_4.addWidget(self.TierodLengthUpperLimit, 4, 1, 1, 1)
        self.label_37 = QtWidgets.QLabel(self.widget)
        self.label_37.setObjectName("label_37")
        self.gridLayout_4.addWidget(self.label_37, 4, 2, 1, 1)
        self.label_27 = QtWidgets.QLabel(self.widget)
        self.label_27.setWordWrap(True)
        self.label_27.setObjectName("label_27")
        self.gridLayout_4.addWidget(self.label_27, 5, 0, 1, 1)
        self.DistanceFromControlArmMountsToSteeringArmMountLowerLimit = QtWidgets.QLineEdit(self.widget)
        self.DistanceFromControlArmMountsToSteeringArmMountLowerLimit.setText("")
        self.DistanceFromControlArmMountsToSteeringArmMountLowerLimit.setObjectName("DistanceFromControlArmMountsToSteeringArmMountLowerLimit")
        self.gridLayout_4.addWidget(self.DistanceFromControlArmMountsToSteeringArmMountLowerLimit, 5, 1, 1, 1)
        self.label_36 = QtWidgets.QLabel(self.widget)
        self.label_36.setObjectName("label_36")
        self.gridLayout_4.addWidget(self.label_36, 5, 2, 1, 1)
        self.label_26 = QtWidgets.QLabel(self.widget)
        self.label_26.setWordWrap(True)
        self.label_26.setObjectName("label_26")
        self.gridLayout_4.addWidget(self.label_26, 6, 0, 1, 1)
        self.DistanceFromControlArmMountsToSteeringArmMountUpperLimit = QtWidgets.QLineEdit(self.widget)
        self.DistanceFromControlArmMountsToSteeringArmMountUpperLimit.setText("")
        self.DistanceFromControlArmMountsToSteeringArmMountUpperLimit.setObjectName("DistanceFromControlArmMountsToSteeringArmMountUpperLimit")
        self.gridLayout_4.addWidget(self.DistanceFromControlArmMountsToSteeringArmMountUpperLimit, 6, 1, 1, 1)
        self.label_38 = QtWidgets.QLabel(self.widget)
        self.label_38.setObjectName("label_38")
        self.gridLayout_4.addWidget(self.label_38, 6, 2, 1, 1)
        self.widget1 = QtWidgets.QWidget(self.centralwidget)
        self.widget1.setGeometry(QtCore.QRect(11, 10, 322, 67))
        self.widget1.setObjectName("widget1")
        self.gridLayout = QtWidgets.QGridLayout(self.widget1)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.label_2 = QtWidgets.QLabel(self.widget1)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 2, 0, 1, 1, QtCore.Qt.AlignLeft)
        self.NumbeOfFitPoints = QtWidgets.QLineEdit(self.widget1)
        self.NumbeOfFitPoints.setText("")
        self.NumbeOfFitPoints.setObjectName("NumbeOfFitPoints")
        self.gridLayout.addWidget(self.NumbeOfFitPoints, 2, 1, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.widget1)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 0, 0, 1, 1)
        self.NumberOfSteps = QtWidgets.QLineEdit(self.widget1)
        self.NumberOfSteps.setText("")
        self.NumberOfSteps.setObjectName("NumberOfSteps")
        self.gridLayout.addWidget(self.NumberOfSteps, 1, 1, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.widget1)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 0, 2, 1, 1)
        self.label_28 = QtWidgets.QLabel(self.widget1)
        self.label_28.setObjectName("label_28")
        self.gridLayout.addWidget(self.label_28, 2, 2, 1, 1)
        self.label_25 = QtWidgets.QLabel(self.widget1)
        self.label_25.setObjectName("label_25")
        self.gridLayout.addWidget(self.label_25, 1, 2, 1, 1)
        self.label = QtWidgets.QLabel(self.widget1)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 1, 0, 1, 1)
        self.widget2 = QtWidgets.QWidget(self.centralwidget)
        self.widget2.setGeometry(QtCore.QRect(11, 520, 394, 72))
        self.widget2.setObjectName("widget2")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.widget2)
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.TierodLengthResult = QtWidgets.QLabel(self.widget2)
        self.TierodLengthResult.setObjectName("TierodLengthResult")
        self.gridLayout_5.addWidget(self.TierodLengthResult, 2, 1, 1, 1)
        self.label_55 = QtWidgets.QLabel(self.widget2)
        self.label_55.setObjectName("label_55")
        self.gridLayout_5.addWidget(self.label_55, 2, 0, 1, 1)
        self.RackSpacingResult = QtWidgets.QLabel(self.widget2)
        self.RackSpacingResult.setObjectName("RackSpacingResult")
        self.gridLayout_5.addWidget(self.RackSpacingResult, 1, 1, 1, 1)
        self.label_46 = QtWidgets.QLabel(self.widget2)
        self.label_46.setObjectName("label_46")
        self.gridLayout_5.addWidget(self.label_46, 0, 0, 1, 1)
        self.label_59 = QtWidgets.QLabel(self.widget2)
        self.label_59.setWordWrap(True)
        self.label_59.setObjectName("label_59")
        self.gridLayout_5.addWidget(self.label_59, 3, 0, 1, 1)
        self.label_48 = QtWidgets.QLabel(self.widget2)
        self.label_48.setObjectName("label_48")
        self.gridLayout_5.addWidget(self.label_48, 1, 0, 1, 1)
        self.label_47 = QtWidgets.QLabel(self.widget2)
        self.label_47.setObjectName("label_47")
        self.gridLayout_5.addWidget(self.label_47, 0, 1, 1, 1)
        self.DistanceFromControlArmMountsToSteeringArmMountResult = QtWidgets.QLabel(self.widget2)
        self.DistanceFromControlArmMountsToSteeringArmMountResult.setObjectName("DistanceFromControlArmMountsToSteeringArmMountResult")
        self.gridLayout_5.addWidget(self.DistanceFromControlArmMountsToSteeringArmMountResult, 3, 1, 1, 1)
        self.widget3 = QtWidgets.QWidget(self.centralwidget)
        self.widget3.setGeometry(QtCore.QRect(11, 474, 163, 25))
        self.widget3.setObjectName("widget3")
        self.formLayout = QtWidgets.QFormLayout(self.widget3)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")
        self.pushButton = QtWidgets.QPushButton(self.widget3)
        self.pushButton.setObjectName("pushButton")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.widget3)
        self.pushButton_2.setObjectName("pushButton_2")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.pushButton_2)
        self.widget4 = QtWidgets.QWidget(self.centralwidget)
        self.widget4.setGeometry(QtCore.QRect(11, 128, 346, 145))
        self.widget4.setObjectName("widget4")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.widget4)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_10 = QtWidgets.QLabel(self.widget4)
        self.label_10.setObjectName("label_10")
        self.gridLayout_3.addWidget(self.label_10, 4, 0, 1, 1)
        self.PhiLowerBound = QtWidgets.QLineEdit(self.widget4)
        self.PhiLowerBound.setText("")
        self.PhiLowerBound.setObjectName("PhiLowerBound")
        self.gridLayout_3.addWidget(self.PhiLowerBound, 1, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.label_11 = QtWidgets.QLabel(self.widget4)
        self.label_11.setObjectName("label_11")
        self.gridLayout_3.addWidget(self.label_11, 5, 0, 1, 1)
        self.label_29 = QtWidgets.QLabel(self.widget4)
        self.label_29.setObjectName("label_29")
        self.gridLayout_3.addWidget(self.label_29, 0, 2, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.widget4)
        self.label_8.setObjectName("label_8")
        self.gridLayout_3.addWidget(self.label_8, 2, 0, 1, 1)
        self.label_9 = QtWidgets.QLabel(self.widget4)
        self.label_9.setObjectName("label_9")
        self.gridLayout_3.addWidget(self.label_9, 3, 0, 1, 1)
        self.label_7 = QtWidgets.QLabel(self.widget4)
        self.label_7.setObjectName("label_7")
        self.gridLayout_3.addWidget(self.label_7, 0, 0, 1, 1)
        self.label_33 = QtWidgets.QLabel(self.widget4)
        self.label_33.setObjectName("label_33")
        self.gridLayout_3.addWidget(self.label_33, 5, 2, 1, 1)
        self.label_30 = QtWidgets.QLabel(self.widget4)
        self.label_30.setObjectName("label_30")
        self.gridLayout_3.addWidget(self.label_30, 1, 2, 1, 1)
        self.label_31 = QtWidgets.QLabel(self.widget4)
        self.label_31.setObjectName("label_31")
        self.gridLayout_3.addWidget(self.label_31, 2, 2, 1, 1)
        self.TrackWidth = QtWidgets.QLineEdit(self.widget4)
        self.TrackWidth.setText("")
        self.TrackWidth.setObjectName("TrackWidth")
        self.gridLayout_3.addWidget(self.TrackWidth, 4, 1, 1, 1)
        self.Wheelbase = QtWidgets.QLineEdit(self.widget4)
        self.Wheelbase.setText("")
        self.Wheelbase.setObjectName("Wheelbase")
        self.gridLayout_3.addWidget(self.Wheelbase, 2, 1, 1, 1)
        self.SteeringRackLength = QtWidgets.QLineEdit(self.widget4)
        self.SteeringRackLength.setText("")
        self.SteeringRackLength.setObjectName("SteeringRackLength")
        self.gridLayout_3.addWidget(self.SteeringRackLength, 5, 1, 1, 1)
        self.label_12 = QtWidgets.QLabel(self.widget4)
        self.label_12.setObjectName("label_12")
        self.gridLayout_3.addWidget(self.label_12, 1, 0, 1, 1)
        self.label_34 = QtWidgets.QLabel(self.widget4)
        self.label_34.setObjectName("label_34")
        self.gridLayout_3.addWidget(self.label_34, 4, 2, 1, 1)
        self.label_32 = QtWidgets.QLabel(self.widget4)
        self.label_32.setObjectName("label_32")
        self.gridLayout_3.addWidget(self.label_32, 3, 2, 1, 1)
        self.SteeringRackTravel = QtWidgets.QLineEdit(self.widget4)
        self.SteeringRackTravel.setText("")
        self.SteeringRackTravel.setObjectName("SteeringRackTravel")
        self.gridLayout_3.addWidget(self.SteeringRackTravel, 3, 1, 1, 1)
        self.widget5 = QtWidgets.QWidget(self.centralwidget)
        self.widget5.setGeometry(QtCore.QRect(11, 82, 339, 41))
        self.widget5.setObjectName("widget5")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget5)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_45 = QtWidgets.QLabel(self.widget5)
        self.label_45.setObjectName("label_45")
        self.gridLayout_2.addWidget(self.label_45, 1, 0, 1, 1)
        self.NumberOfBestFitsToPlot = QtWidgets.QLineEdit(self.widget5)
        self.NumberOfBestFitsToPlot.setText("")
        self.NumberOfBestFitsToPlot.setObjectName("NumberOfBestFitsToPlot")
        self.gridLayout_2.addWidget(self.NumberOfBestFitsToPlot, 1, 1, 1, 1)
        self.label_43 = QtWidgets.QLabel(self.widget5)
        self.label_43.setObjectName("label_43")
        self.gridLayout_2.addWidget(self.label_43, 0, 0, 1, 1)
        self.label_44 = QtWidgets.QLabel(self.widget5)
        self.label_44.setObjectName("label_44")
        self.gridLayout_2.addWidget(self.label_44, 1, 2, 1, 1)
        self.label_42 = QtWidgets.QLabel(self.widget5)
        self.label_42.setObjectName("label_42")
        self.gridLayout_2.addWidget(self.label_42, 0, 2, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 417, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.retranslateUi(MainWindow)
        self.pushButton_2.clicked.connect(self.OptimizeSteering)
        self.pushButton.clicked.connect(self.defaultLengths)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_20.setText(_translate("MainWindow", "Variables"))
        self.label_40.setText(_translate("MainWindow", "Default Values"))
        self.label_21.setText(_translate("MainWindow", "Rack Spacing Lower Limit [mm]"))
        self.label_41.setText(_translate("MainWindow", "50"))
        self.label_22.setText(_translate("MainWindow", "Rack Spacing Upper Limit [mm]"))
        self.label_39.setText(_translate("MainWindow", "450"))
        self.label_23.setText(_translate("MainWindow", "Tierod Length Lower Limit [mm]"))
        self.label_35.setText(_translate("MainWindow", "50"))
        self.label_24.setText(_translate("MainWindow", "Tierod Length Upper Limit [mm]"))
        self.label_37.setText(_translate("MainWindow", "350"))
        self.label_27.setText(_translate("MainWindow", "Dist. Ctl. Arm/Steering Arm L.L. [mm]"))
        self.label_36.setText(_translate("MainWindow", "50.1"))
        self.label_26.setText(_translate("MainWindow", "Dist. Ctl. Arm/Steering Arm U.L. [mm]"))
        self.label_38.setText(_translate("MainWindow", "800"))
        self.label_2.setText(_translate("MainWindow", "Number of Fit Points"))
        self.label_6.setText(_translate("MainWindow", "Simulation Parameters"))
        self.label_5.setText(_translate("MainWindow", "Default Values"))
        self.label_28.setText(_translate("MainWindow", "100"))
        self.label_25.setText(_translate("MainWindow", "10"))
        self.label.setText(_translate("MainWindow", "Number of Steps"))
        self.TierodLengthResult.setText(_translate("MainWindow", "-"))
        self.label_55.setText(_translate("MainWindow", "Tierod Length [mm]"))
        self.RackSpacingResult.setText(_translate("MainWindow", "-"))
        self.label_46.setText(_translate("MainWindow", "Results"))
        self.label_59.setText(_translate("MainWindow", "Distance from Control Arm Mounts to Steering Arm Mount [mm]"))
        self.label_48.setText(_translate("MainWindow", "Rack Spacing [mm]"))
        self.label_47.setText(_translate("MainWindow", "Result"))
        self.DistanceFromControlArmMountsToSteeringArmMountResult.setText(_translate("MainWindow", "-"))
        self.pushButton.setText(_translate("MainWindow", "Default Values"))
        self.pushButton_2.setText(_translate("MainWindow", "Run Simulation"))
        self.label_10.setText(_translate("MainWindow", "Track Width [mm]"))
        self.label_11.setText(_translate("MainWindow", "Steering Rack Length [mm]"))
        self.label_29.setText(_translate("MainWindow", "Default Values"))
        self.label_8.setText(_translate("MainWindow", "Wheelbase [mm]"))
        self.label_9.setText(_translate("MainWindow", "Streering Rack Travel [mm]"))
        self.label_7.setText(_translate("MainWindow", "Constants"))
        self.label_33.setText(_translate("MainWindow", "300"))
        self.label_30.setText(_translate("MainWindow", "-15"))
        self.label_31.setText(_translate("MainWindow", "2000"))
        self.label_12.setText(_translate("MainWindow", "Phi Lower Bound [Degree]"))
        self.label_34.setText(_translate("MainWindow", "800"))
        self.label_32.setText(_translate("MainWindow", "80"))
        self.label_45.setText(_translate("MainWindow", "Number of Best Fits to Plot"))
        self.label_43.setText(_translate("MainWindow", "Plotting Parameter"))
        self.label_44.setText(_translate("MainWindow", "100"))
        self.label_42.setText(_translate("MainWindow", "Default Value"))

    def OptimizeSteering(self):

        
        from numba import jit, prange
        import numpy as np
        import matplotlib.pyplot as plt
        '''-------------------------------------------------OPTIMIZATION PARAMETERS---------------------------------------------------------'''
        # Simulation parameters
        num_steps = int(self.NumberOfSteps.text()) # Define the number of steps
        num_fit_points = int(self.NumbeOfFitPoints.text()) # Define granularity

        # Constants
        phi_lower_bound = np.radians(float(self.PhiLowerBound.text())) # Lower bound for phi in radians [Deg] -> [Rad]
        wb = float(self.Wheelbase.text()) # Wheelbase [mm]
        x_travel = float(self.SteeringRackTravel.text()) # Steering rack travel [mm]
        w_track = float(self.TrackWidth.text()) # Track width [mm]
        l_rack = float(self.SteeringRackTravel.text()) # Steering rack length [mm]

        # Dependent Variables
        wt = (w_track - l_rack)/2 # Equivalent steering thickness [mm]

        # Variables
        rack_spacing_lower =  float(self.RackSpacingLowerLimit.text()) # Front/back distance between steering rack axis and control arm bearing mounting [mm]
        rack_spacing_upper =  float(self.RackSpacingUpperLimit.text())

        l_tierod_lower = float(self.TierodLengthLowerLimit.text()) # Tierod length [mm]
        l_tierod_upper = float(self.TierodLengthUpperLimit.text())

        l_str_arm_lower = float(self.DistanceFromControlArmMountsToSteeringArmMountLowerLimit.text()) # Distance from control arm mounts to steering arm mount [mm]
        l_str_arm_upper = float(self.DistanceFromControlArmMountsToSteeringArmMountUpperLimit.text())

        # Plotting parameters
        num_graphs = int(self.NumberOfBestFitsToPlot.text()) # Number of next best fits to plot
        """
        ----------------------------------------------------------------------------------------------------------------------------------------
        Everything above this point is a variable you can change.
        Everything below is code you do not change.
        """

        # Define initial variable vectors
        rack_spacing=np.linspace(rack_spacing_lower, rack_spacing_upper, num_steps)
        l_tierod=np.linspace(l_tierod_lower, l_tierod_upper, num_steps)
        l_str_arm=np.linspace(l_str_arm_lower, l_str_arm_upper, num_steps)

        # Define helper function to pull parameters
        @jit(nopython=True,parallel=False) 
        def cartesian_product_on_the_fly_mm(num_fit_points, rack_spacing, l_tierod, l_str_arm):
            results = []
            
            for i in prange(rack_spacing.size):
                for j in prange(l_tierod.size):
                    for k in prange(l_str_arm.size):
                        current_rack_spacing = rack_spacing[i]
                        current_l_tierod = l_tierod[j]
                        current_l_str_arm = l_str_arm[k]
                        
                        result = sim(current_rack_spacing, wt, current_l_tierod, current_l_str_arm, wb, x_travel, num_fit_points, phi_lower_bound)
                        results.append(result)
                        
            return results
                        
        # Simulation Function
        # Takes in geometry object and outputs matched numerical vectors of objects

        # Returns an error value for given geometry
        # Inputs: Steering geometry values and num_fit_points (the length of the output vectors)
        # Outputs: A vector of inner wheel angles, a vector of outer wheel angles, a vector of ideal outer wheel angles
        @jit(nopython=True, parallel=True)
        def sim(rack_spacing, wt, l_tierod, l_str_arm, wb, x_travel, num_fit_points, phi_lower_bound):
            
            # Determine Phi
            phi = theta2(rack_spacing, wt, l_tierod, l_str_arm, 0)
            if phi < phi_lower_bound:
                results = np.full((3, num_fit_points), np.nan)
            
                return results
            
            else:
                # Determine rack vectors for inside and outside wheels
                x_i = np.linspace(0, -x_travel, num_fit_points)
                x_o = np.linspace(0, x_travel, num_fit_points)
            
                # Determine corresponding theta 2 lists
                theta2_i = theta2(rack_spacing, wt, l_tierod, l_str_arm, x_i)
                theta2_o = theta2(rack_spacing, wt, l_tierod, l_str_arm, x_o)
                
                # Determine corresponding theta_i and theta_o
                theta_i = np.pi - wheel_angle(theta2_i, phi)
                theta_o = wheel_angle(theta2_o, phi)
            
                # Determine ideal theta_o
                theta_o_ideal = theta_o_ideal_eq(wb, wt, theta_i)
            
                # Preallocate results array
                results = np.empty((3, num_fit_points), dtype=np.float64)
            
                # Assign the results directly
                results[0, :] = theta_i
                results[1, :] = theta_o
                results[2, :] = theta_o_ideal
            
                return results

        # Helper Functions
        # Jit has not found a way to parallelize this
        @jit(nopython=True, parallel=False)
        def theta2(a, wt, l1, l2, x):

            # Define initial variables
            d = np.sqrt(a**2 + (wt-x)**2)
            theta11 = np.arctan(a/(wt-x))
            theta12 = np.arccos((d**2 + l1**2 - l2**2) / (2*d*l1))
            theta1 = theta11 - theta12

            # Calculate theta2
            theta2 = np.arctan((a - l1*np.sin(theta1)) / (wt - x - l1*np.cos(theta1)))
            return theta2


        # Helper function to add wheel offset to steering arm angle
        @jit(nopython=True, parallel=True)
        def wheel_angle(theta2, phi):
            return theta2 + np.pi/2 - phi

        # Helper function to calculate ideal outer wheel angle
        @jit(nopython=True, parallel=True)
        def theta_o_ideal_eq(wb, wt, theta_i):
            return np.pi/2 - np.arctan((wb) / (wb/np.tan(np.pi/2 - theta_i) + 2*wt))

        # Error calculation
        @jit(nopython=True,parallel=True)
        def RMSE(y_actual_np_vector,y_predicted_np_vector):
            
            #squared differences
            squared_differences=(y_actual_np_vector-y_predicted_np_vector)**2
            
            #square root mean of the squared errors/differences (RMSE)
            rmse=np.sqrt(np.mean(squared_differences))
            
            return rmse

        # Running the simulation
        simulation_results = cartesian_product_on_the_fly_mm(num_fit_points, rack_spacing, l_tierod, l_str_arm)

        # Initialize a list to store indices of valid simulations
        valid_indices = []

        # Filter out NaN-containing results and track valid indices
        filtered_simulation_results = []
        for index, result in enumerate(simulation_results):
            if not np.isnan(result).any():
                filtered_simulation_results.append(result)
                valid_indices.append(index)

        # Update simulation_results with filtered results
        simulation_results = filtered_simulation_results

        # Running the error calculation
        rmse_results = []

        # Collect RMSE values
        for result in simulation_results:
            y_actual_np_vector = result[1, :]
            y_predicted_np_vector = result[2, :]
            rmse = RMSE(y_actual_np_vector, y_predicted_np_vector)
            rmse_results.append(rmse)

        # Pair each RMSE value with its original index
        indexed_rmse_results = list(enumerate(rmse_results))

        # Sort based on RMSE values
        indexed_rmse_results.sort(key=lambda x: x[1])

        # Separate the indices and sorted RMSE values
        sorted_indices, sorted_rmse = zip(*indexed_rmse_results)

        # Finding the index of the minimum RMSE in the filtered results
        min_rmse = sorted_rmse[0]
        min_rmse_filtered_index = rmse_results.index(min_rmse)

        # Map this index back to the original index in simulation_results
        min_rmse_original_index = valid_indices[min_rmse_filtered_index]

        # Calculate the index in each dimension using the original index
        index_rack_spacing = (min_rmse_original_index // (num_steps ** 2)) % num_steps
        index_l_tierod = (min_rmse_original_index // num_steps) % num_steps
        index_l_str_arm = min_rmse_original_index % num_steps

        # Retrieve the optimal values
        optimal_rack_spacing = rack_spacing[index_rack_spacing]
        optimal_l_tierod = l_tierod[index_l_tierod]
        optimal_l_str_arm = l_str_arm[index_l_str_arm]

        # Output Ideal value information
        print("Minimum RMSE:", min_rmse, "at index", min_rmse_original_index)
        print("Optimal Geometry:")
        print("Rack Spacing:", optimal_rack_spacing)
        print("Tierod Length:", optimal_l_tierod)
        print("Steering Arm Length:", optimal_l_str_arm)

        # print to GUI
        self.RackSpacingResult.setText(str(optimal_rack_spacing))
        self.TierodLengthResult.setText(str(optimal_l_tierod))
        self.DistanceFromControlArmMountsToSteeringArmMountResult.setText(str(optimal_l_str_arm))
        

        # Cacluate performance from geometry
        [theta_i_plot, theta_o_plot, theta_o_ideal_plot] = sim(optimal_rack_spacing, wt, optimal_l_tierod, optimal_l_str_arm, wb, x_travel, num_fit_points, phi_lower_bound)

        # Plotting setup
        plt.figure()
        # Save plotting range
        x_range = [min(theta_i_plot)-0.05, max(theta_i_plot)+0.05]
        y_range = [min(theta_o_ideal_plot)-0.05, max(theta_o_ideal_plot)+0.05]
        y_ticks = []
        for i in list(np.linspace(y_range[0], y_range[1], 5)):
            y_ticks.append(round(i, 3))


        # Plot ideal solution and best optimized solution
        plt.plot(theta_i_plot, theta_o_ideal_plot, 'k-', linewidth = 8, label = 'Ideal Curve')
        plt.plot(theta_i_plot, theta_o_plot, 'r--', linewidth = 2, label = f'Best Fit Curve: rsme = {min_rmse}')

        # Calculate and plot curves for the next 100 best fitting curves 

        for i in sorted_rmse[1:num_graphs+1]:

            min_rmse_filtered_index = rmse_results.index(i)

            # Map this index back to the original index in simulation_results
            min_rmse_original_index = valid_indices[min_rmse_filtered_index]

            # Calculate the index in each dimension using the original index
            index_rack_spacing = (min_rmse_original_index // (num_steps ** 2)) % num_steps
            index_l_tierod = (min_rmse_original_index // num_steps) % num_steps
            index_l_str_arm = min_rmse_original_index % num_steps

            # Retrieve the optimal values
            optimal_rack_spacing = rack_spacing[index_rack_spacing]
            optimal_l_tierod = l_tierod[index_l_tierod]
            optimal_l_str_arm = l_str_arm[index_l_str_arm]

            # Cacluate performance from geometry
            [theta_i_plot, theta_o_plot, theta_o_ideal_plot] = sim(optimal_rack_spacing, wt, optimal_l_tierod, optimal_l_str_arm, wb, x_travel, num_fit_points, phi_lower_bound)
            plt.plot(theta_i_plot, theta_o_plot, '--', 'color', 'tab:gray', linewidth = 0.25)

        # Format and display figure
        plt.title(f'Comparison of inner and outer wheel curves with step count of {num_steps}')
        plt.xlabel('Inner Wheel Angle [rad]')
        plt.ylabel('Outer Wheel Angle [rad]')
        plt.xlim(x_range)
        plt.ylim(y_range)
        plt.legend(loc='best')
        plt.yticks(y_ticks, y_ticks) 
        plt.show()

    def defaultLengths(self):
        self.NumberOfSteps.setText("10") # Define the number of steps
        self.NumbeOfFitPoints.setText("100") # Define granularity

        # Constants
        self.PhiLowerBound.setText("-15") # Lower bound for phi in radians [Deg] -> [Rad]
        self.Wheelbase.setText("2000") # Wheelbase [mm]
        self.SteeringRackTravel.setText("80") # Steering rack travel [mm]
        self.TrackWidth.setText("800") # Track width [mm]
        self.SteeringRackLength.setText("300") # Steering rack length [mm]


        # Variables
        self.RackSpacingLowerLimit.setText("50") # Front/back distance between steering rack axis and control arm bearing mounting [mm]
        self.RackSpacingUpperLimit.setText("450")

        self.TierodLengthLowerLimit.setText("50") # Tierod length [mm]
        self.TierodLengthUpperLimit.setText("350")

        self.DistanceFromControlArmMountsToSteeringArmMountLowerLimit.setText("50.1") # Distance from control arm mounts to steering arm mount [mm]
        self.DistanceFromControlArmMountsToSteeringArmMountUpperLimit.setText("800")

        # Plotting parameters
        self.NumberOfBestFitsToPlot.setText("100") # Number of next best fits to plot
        self.OptimizeSteering()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
